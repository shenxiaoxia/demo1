#include<stdio.h>  /*I/O函数*/
#include<stdlib.h> /*其它说明*/
#include<string.h> /*字符串函数*/
#define BUFLEN 100 /* 缓冲区最大字符数 */
#define LEN 15 /* 学号和姓名最大字符数,实际请更改 */
#define N 100 /* 最大学生人数,实际请更改*/
struct record /*结构体*/
{
char code[LEN+1]; /* 学号 */
char name[LEN+1]; /* 姓名 */
int age; /* 年龄 */
char sex[3]; /* 性别 */
char time[LEN+1]; /* 出生年月 */
char add[30]; /* 家庭地址 */
char tel[LEN+1]; /* 电话号码 */
char mail[30]; /* 电子邮件地址 */
}stu[N];
int k=1,n,m; /* 定义全局变量 */ 
void readfile();/* 函数声明 */
void seek();
void modify();
void insert();
void del();
void display();
void save();
void menu(); 
int main()
{  
while(k)
menu();
system("pause");
return 0;
} 
void help()
{ 
printf("\n0.欢迎使用系统帮助！\n");
printf("\n1.进入系统后,先刷新学生信息,再查询;\n");
printf("\n2.按照菜单提示键入数字代号;\n");
printf("\n3.增加学生信息后,切记保存按7;\n");
printf("\n4.谢谢您的使用！\n");
} 
void readfile()/* 建立信息 */
{
char *p="student.txt";
FILE *fp;
int i=0;
if ((fp=fopen("student.txt","r"))==NULL)
{  
printf("Open file %s error! Strike any key to exit!",p);
system("pause");
exit(0);
}
while(fscanf(fp,"%s %s%d%s %s %s %s %s",stu[i].code,stu[i].name,&stu[i].age,
stu[i].sex,stu[i].time,stu[i].add,stu[i].tel,stu[i].mail)==8)
{
i++;
i=i;
}
fclose(fp);
n=i;
printf("录入完毕！\n");
} 

void seek() /*查找*/
{
int i,item,flag;
char s1[21]; /* 以姓名和学号最长长度+1为准 */
printf("------------------\n");
printf("-----1.按学号查询-----\n");
printf("-----2.按姓名查询-----\n");
printf("-----3.退出本菜单-----\n");
printf("------------------\n");
while(1)
{
printf("请选择子菜单编号:");
scanf("%d",&item);
flag=0;
switch(item)
{
case 1:
printf("请输入要查询的学生的学号:\n");
scanf("%s",s1);
for(i=0;i<n;i++)
if(strcmp(stu[i].code,s1)==0)
{
flag=1;
printf("学生学号  学生姓名  年龄  性别   出生年月   地址     电话       E-mail\n");
printf("--------------------------------------------------------------------\n");
printf("%6s %7s %6d %5s %9s %8s %10s %14s\n",stu[i].code,stu[i].name,stu[i].age,
stu[i].sex,stu[i].time,stu[i].add,stu[i].tel,stu[i].mail);
}
if(flag==0)
printf("该学号不存在！\n"); break;
case 2:
printf("请输入要查询的学生的姓名:\n");
scanf("%s",s1);
for(i=0;i<n;i++)
if(strcmp(stu[i].name,s1)==0)
{
flag=1;
printf("学生学号  学生姓名  年龄  性别   出生年月   地址     电话     E-mail\n");
printf("--------------------------------------------------------------------\n");
printf("%6s %7s %6d %5s %9s %8s %10s %14s\n",stu[i].code,stu[i].name,stu[i].age,
stu[i].sex,stu[i].time,stu[i].add,stu[i].tel,stu[i].mail);
}
if(flag==0)
printf("该姓名不存在！\n"); break;
case 3:return;
default:printf("请在1-3之间选择\n");
}
}
} 
void modify() /*修改信息*/
{
int i,item,num;
char sex1[3],s1[LEN+1],s2[LEN+1]; /* 以姓名和学号最长长度+1为准 */
printf("请输入要要修改的学生的学号:\n");
scanf("%s",s1);
for(i=0;i<n;i++)
if(strcmp(stu[i].code,s1)==0) /*比较字符串是否相等*/
num=i;
printf("------------------\n");
printf("1.修改姓名\n");
printf("2.修改年龄\n");
printf("3.修改性别\n");
printf("4.修改出生年月\n");
printf("5.修改地址\n");
printf("6.修改电话号码\n");
printf("7.修改E-mail地址\n");
printf("8.退出本菜单\n");
printf("------------------\n");
while(1)
{
printf("请选择子菜单编号:");
scanf("%d",&item);
switch(item)
{
case 1:
printf("请输入新的姓名:\n");
scanf("%s",s2);
strcpy(stu[num].name,s2); break;
case 2:
printf("请输入新的年龄:\n");
scanf("%d",&stu[num].age);break;
case 3:
printf("请输入新的性别:\n");
scanf("%s",sex1);
strcpy(stu[num].sex,sex1); break;
case 4:
printf("请输入新的出生年月:\n");
scanf("%s",s2);
strcpy(stu[num].time,s2); break;
case 5:
printf("请输入新的地址:\n");
scanf("%s",s2);
strcpy(stu[num].add,s2); break;
case 6:
printf("请输入新的电话号码:\n");
scanf("%s",s2);
strcpy(stu[num].tel,s2); break;
case 7:
printf("请输入新的E-mail地址:\n");
scanf("%s",s2);
strcpy(stu[num].mail,s2); break;
case 8:return;
default:printf("请在1-8之间选择\n");
}
}
} 
 void sort()/*按学号排序*/
{
int i,j,*p,*q,s;
  char temp[10];
for(i=0;i<n-1;i++)
{
for(j=n-1;j>i;j--)
if(strcmp(stu[j-1].code,stu[j].code)>0)
{
strcpy(temp,stu[j-1].code);
strcpy(stu[j-1].code,stu[j].code);
strcpy(stu[j].code,temp);
strcpy(temp,stu[j-1].name);
strcpy(stu[j-1].name,stu[j].name);
strcpy(stu[j].name,temp);
strcpy(temp,stu[j-1].sex);
strcpy(stu[j-1].sex,stu[j].sex);
strcpy(stu[j].sex,temp);
strcpy(temp,stu[j-1].time);
strcpy(stu[j-1].time,stu[j].time);
strcpy(stu[j].time,temp);
strcpy(temp,stu[j-1].add);
strcpy(stu[j-1].add,stu[j].add);
strcpy(stu[j].add,temp);
strcpy(temp,stu[j-1].tel);
strcpy(stu[j-1].tel,stu[j].tel);
strcpy(stu[j].tel,temp);
strcpy(temp,stu[j-1].mail);
strcpy(stu[j-1].mail,stu[j].mail);
strcpy(stu[j].mail,temp);
 p=&stu[j-1].age;
 q=&stu[j].age;
 s=*q;
 *q=*p;
 *p=s;
}
}
} 
void insert() /*插入函数*/
{
 int i=n,j,flag;
printf("请输入待增加的学生数:\n");
scanf("%d",&m);
do
{
 flag=1;
while(flag)
{
flag=0;
printf("请输入第 %d 个学生的学号:\n",i+1);
scanf("%s",stu[i].code);
for(j=0;j<i;j++)
if(strcmp(stu[i].code,stu[j].code)==0)
{
printf("已有该学号,请检查后重新录入!\n");
flag=1;
break; /*如有重复立即退出该层循环,提高判断速度*/
}
}
printf("请输入第 %d 个学生的姓名:\n",i+1);
scanf("%s",stu[i].name);
printf("请输入第 %d 个学生的年龄:\n",i+1);
scanf("%d",&stu[i].age);
printf("请输入第 %d 个学生的性别:\n",i+1);
scanf("%s",stu[i].sex);
printf("请输入第 %d 个学生的出生年月:(格式:年.月)\n",i+1);
scanf("%s",stu[i].time);
printf("请输入第 %d 个学生的地址:\n",i+1);
scanf("%s",stu[i].add);
printf("请输入第 %d 个学生的电话:\n",i+1);
scanf("%s",stu[i].tel);
printf("请输入第 %d 个学生的E-mail:\n",i+1);
scanf("%s",stu[i].mail);
if(flag==0)
{
 i=i;
i++;
}
}
while(i<n+m);
n+=m;
printf("录入完毕！\n\n");
sort();
} 
void del()
{
int i,j,flag=0;
char s1[LEN+1];
printf("请输入要删除学生的学号:\n");
scanf("%s",s1);
for(i=0;i<n;i++)
if(strcmp(stu[i].code,s1)==0)
{
 flag=1;
for(j=i;j<n-1;j++)
stu[j]=stu[j+1];
}
if(flag==0)
printf("该学号不存在！\n");
if(flag==1)
{
printf("删除成功,显示结果请选择菜单6\n");
n--;
}
} 
void display()
{
 int i;
printf("所有学生的信息为:\n");
printf("学生学号  学生姓名  年龄  性别   出生年月   地址     电话     E-mail\n");
printf("--------------------------------------------------------------------\n");
for(i=0;i<n;i++)
{ 
printf("%6s %7s %5d %5s %9s %8s %10s %14s\n",stu[i].code,stu[i].name,stu[i].age,
stu[i].sex,stu[i].time,stu[i].add,stu[i].tel,stu[i].mail);
}
} 
void save()
{
int i;
FILE *fp;
fp=fopen("student.txt","w"); /*写入*/
for(i=0;i<n;i++)
{
fprintf(fp,"%s %s %d %s %s %s %s %s\n",stu[i].code,stu[i].name,stu[i].age,
stu[i].sex,stu[i].time,stu[i].add,stu[i].tel,stu[i].mail);
}
fclose(fp);
} 
void menu()/* 界面 */
{
int num;
printf("*********************系统功能菜单************************       \n");
printf("友情提醒:查询前请先刷新系统！    \n");
printf("     ----------------------   ----------------------   \n");
printf("     *********************************************     \n");
printf("     * 0.系统帮助及说明   * *  1.刷新学生信息    *     \n");
printf("     *********************************************     \n"); 
printf("     * 2.查询学生信息     * *  3.修改学生信息    *     \n");
printf("     *********************************************     \n");
printf("     * 4.增加学生信息     * *  5.按学号删除信息  *     \n");
printf("     *********************************************     \n");
printf("     * 6.显示当前信息     * *  7.保存当前学生信息*     \n");
printf("     ********************** **********************     \n");
printf("     * 8.退出系统         *                            \n");
printf("     **********************                            \n");
printf("     ----------------------   ----------------------                           \n");
printf("请选择菜单编号:");
scanf("%d",&num);
switch(num)
{ 
case 0:help();break;
case 1:readfile();break;
case 2:seek();break;
case 3:modify();break;
case 4:insert();break;
case 5:del();break;
case 6:display();break;
case 7:save();break;
case 8:k=0;break;
default:printf("请在0-8之间选择\n");}
}

























#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* 总链表――存放所有信息 */
typedef struct Sum_Node
{
    /* 学生信息 */
    char stuNo[20][20];
    char stuName[20][20];
    char stuSex[20][20];
    /* 课程信息 */
    char CourseNum[20];
    char CourseName[20];
    char CourseTeacher[20];
    struct Sum_Node *next;
}TotalNode;

/* 链表管理员――暂时不需要 */
/*typedef struct Node
{
    char Num[20];
    char Name[20];
    char Sex[10];
    struct Node *next;
}Manager_Node;*/

char studentAccount[20];
char studentPassword[20];
char teacherAccount[20];
char teacherPassword[20];
char managerAccount[20];
char managerPassword[20];

/* 定义结构体指针 */
TotalNode *pTeacher;
TotalNode *pStudent;


/* 函数的声明 */
void checkPerson_Msg(TotalNode *phead,int n);
void CreateTeacherNode(TotalNode *head);

/* 学生信息的输出-链表 */
void OutStudentNode(TotalNode *head,char *Account)
{
    TotalNode *p;
    int num=0;
    int i,j;
    int flag=0;
    char Account_random[20]="";
    pStudent=pTeacher;  // 学生和老师用的链表是同一个
    p=pStudent;

    puts("******所选课程信息******");
    puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
    if(pStudent==NULL)
    {
        puts("没有数据!");
        puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        return;
    }
    printf("请输入所要查询人的姓名:");
    gets(Account_random);   //  获取所要查询的学生姓名
    if(0 == Account_random[0])
    {   
        gets(Account_random);
    }
    while(p!=NULL)
    {
        for(j=0;j<20;j++)
        {
            if(0 == strcmp(p->stuName[j],Account_random))
            {
                printf("课程代码:%s\t",p->CourseNum);
                printf("课程名称:%s\t",p->CourseName);
                printf("课程老师:%s\t",p->CourseTeacher);
                for(i=0;i<20;i++)
                {
                    if(p->stuNo[i][0]!='\0')
                    {
                        num++;
                    }
                }
                printf("选课学生:%d\t",num);
                num=0;  //  清0操作
                putchar('\n');
                flag=1;
            }
        }
        p=p->next;
    }
    if(0 == flag)
    {
        puts("没有该学生选课信息!!!!");
    }
    puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
    putchar('\n');  
}

/* 学生信息的插入-链表 */
void InsertStudentNode(TotalNode *head,char *Account)
{
    TotalNode *p;
    int i;
    char courseCode[20]="";
    pStudent=pTeacher;  // 学生和老师用的链表是同一个，都是链表头
    p=pStudent;
    if(p==NULL)
    {
        puts("等待教师录入选课信息，请下次再进行选择!!");
        return;
    }
    printf("【请输入正确的课程代码】");
    gets(courseCode);
    if(0 == courseCode[0])
    {
        gets(courseCode);
    }
    while(p!=NULL)
    {
        if(0 == strcmp(p->CourseNum, courseCode))
        {
            for(i=0;i<20;i++)
            {   
                if(p->stuNo[i][0] == '\0')
                {
                    printf("请输入学号:");
                    gets(p->stuNo[i]);
                    printf("请输入姓名:");
                    gets(p->stuName[i]);
                    printf("请输入性别:");
                    gets(p->stuSex[i]);
                    puts("选课成功!!!!");
                    return;
                }
            }
        }
        p=p->next;
    }
    puts("$$$$$$选课失败，请重新选择$$$$$$");

}

/* 删除所选课程 */
void DeleteStudentNode(TotalNode *head,char *Account)
{
    char coursNo[20]="";    //  课程代码
    char student[20]="";    //  学生姓名
    TotalNode *p;
    int i;
    int flag=0;
    pStudent=pTeacher;  // 学生和老师用的链表是同一个，都是链表头
    p=pStudent;
    if(pStudent==NULL)
    {
        puts("没选该课程，删除失败!!!!");
        return;
    }

    printf("【输入学生姓名】");
    gets(student);
    if(0 == student[0])
    {
        gets(student);
    }

    printf("【请输入删除的课程代码】");
    gets(coursNo);
    if(0 == coursNo[0])
    {
        gets(coursNo);
    }
    while(p!=NULL)
    {
        if(0==strcmp(p->CourseNum,coursNo)) //  查询所要删除的课程代码
        {
            for(i=0;i<20;i++)
            {
                if(0==strcmp(p->stuName[i],student))
                {
                    /* 初始化清0操作 */
                    p->stuNo[i][0]='\0';
                    p->stuName[i][0]='\0';
                    p->stuSex[i][0]='\0';
                    puts("删除成功!!!!");
                    flag=1;     //  删除标志位
                }
            }   
        }
        p=p->next;
    }
    if(0 == flag)   //  如果删除成功标志位置1
    {
        puts("删除失败!!!!");
    }

}


/* 教师信息的输出-链表 */
void OutTeacherNode(TotalNode *head)
{
    TotalNode *p;
    int num=0;
    int i;
    p=pTeacher;
    puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
    if(pTeacher==NULL)
    {
        puts("没有数据!");
        puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        return;
    }
    while(p!=NULL)
    {
        printf("课程代码:%s\t",p->CourseNum);
        printf("课程名称:%s\t",p->CourseName);
        printf("课程老师:%s\t",p->CourseTeacher);
        for(i=0;i<20;i++)
        {
            if(p->stuNo[i][0]!='\0')
            {
                num++;
            }
        }
        printf("选课学生:%d\t",num);
        num=0;  //  清0操作
        putchar('\n');
        p=p->next;
    }
    puts("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
    putchar('\n');  
}

/* 教师信息的插入-链表 */
void InsertTeacherNode(TotalNode *head)
{
    TotalNode *p;
    TotalNode *q;
    int i;
    p=pTeacher;  // 教师链表的头
    if(pTeacher==NULL)
    {
        CreateTeacherNode(head);
        puts("添加成功!");
        return;
    }
    while(p!=NULL)
    {
        if(p->next == NULL)
        {
            q=(TotalNode *)malloc(sizeof(TotalNode));
            p->next=q;
            q->next=NULL;
            for(i=0;i<20;i++)
            {
                q->stuNo[i][0]='\0';
            }
            printf("请输入课程代码:");
            gets(q->CourseNum);
            if(0 == *q->CourseNum)
            {
                gets(q->CourseNum);
            }
            printf("请输入课程名称:");
            gets(q->CourseName);
            printf("请输入课程教师:");
            gets(q->CourseTeacher);
            puts("添加成功!");
            break;
        }
        p=p->next;
    }
    //pTeacher=head;
}

/* 教师信息的插入-链表 */
void CreateTeacherNode(TotalNode *head)
{
    int i;
    pTeacher=(TotalNode *)malloc(sizeof(TotalNode));
    pTeacher->next=NULL;
    for(i=0;i<20;i++)
    {
        pTeacher->stuNo[i][0]='\0';
    }
    printf("请输入课程代码:");
    gets(pTeacher->CourseNum);
    if(0 == *pTeacher->CourseNum)
    {
        gets(pTeacher->CourseNum);
    }
    printf("请输入课程名称:");
    gets(pTeacher->CourseName);
    printf("请输入课程教师:");
    gets(pTeacher->CourseTeacher);
    //pTeacher=head;
}

/* 删除指定数据 */
void DeleteTeacherNode(TotalNode *phead)
{
    char coursNo[20]="";    //  课程代码
    TotalNode *p;
    TotalNode *s;
    p=pTeacher; // 教师链表的头
    s=pTeacher;
    if(NULL==pTeacher)
    {
        puts("没有课程信息!!!!");
        return;
    }
    printf("【请输入删除的课程代码】");
    gets(coursNo);
    if(0 == coursNo[0])
    {
        gets(coursNo);
    }
    if(0 == strcmp(p->CourseNum,coursNo))
    {
        pTeacher=p->next;
        puts("删除成功!!");
        return;
    }
    while(p != NULL)
    {
        if(0 == strcmp(p->CourseNum,coursNo))
        {
            s->next=p->next;
            puts("删除成功!!");
            return;
        }
        s=p;
        p=p->next;
    }
}

/* 功能显示 */
void display(TotalNode *phead)
{
    int n;
    while(1)
    {
        puts("=========请选择登录页面=========");
        puts("[1]学生登录");
        puts("[2]教师登录");
        puts("[3]管理员登录");
        puts("[4]退出系统");
        while(1)    //  循环检查输入的值是否正确
        {
            printf("【请选择】");
            scanf("%d",&n);
            if(n>4 || n<1)
            {
                puts("输入有误，请选择正确的选项：");
                continue;       //  输入不正确，重新输入
            }
            else
            {
                break;  //  输入正确，退出循环
            }
        }
        if( 1 == n )  //    学生登录系统
        {
            puts("=========欢迎登录学生系统=========");
            printf("请输入账号和密码\n");
            checkPerson_Msg(phead,1);


        }
        if( 2 == n )  //    老师登录系统
        {
            puts("=========欢迎登录教师系统=========");
            printf("请输入账号和密码\n");
            checkPerson_Msg(phead,2);

        }
        if( 3 == n )  //    管理员登录系统
        {
            puts("=========欢迎登录管理员系统=========");
            printf("请输入账号和密码\n");
            checkPerson_Msg(phead,3);

        }
        if( 4 == n )  //    退出系统
        {
            puts("@@@@@@@@@欢迎下次登录，再见!!!@@@@@@@@@");
            exit(0);        
        }
    }
}

/* 学生登录后的操作，查询、修改 */
void Student_Mng(TotalNode *phead, char *Account,int n)
{
    switch(n)
    {
    case 1:     //  查询
        OutStudentNode(phead,Account);
        break;
    case 2:     //  添加
        InsertStudentNode(phead,Account);
        break;
    case 3:     //  删除
        DeleteStudentNode(phead,Account);
        break;
    case 4: ;   //  返回主页面,上层已经实现，此处不需要考虑
        break;
    default:
        puts("异常!");
        break;
    }
}

/* 教师登录后的操作，查询、修改 */
void Teacher_Mng(TotalNode *phead, char *Account,int n)
{

    switch(n)
    {
    case 1: //  查询学生选课情况
        OutTeacherNode(phead);
        break;
    case 2: //  添加和删除课程信息
        InsertTeacherNode(phead);
        break;
    case 3:     
        DeleteTeacherNode(phead);
        break;
    case 4:
        break;  //  上层实现其功能
    default:
        puts("异常!");
        break;
    }
}

/* 管理员登录后的操作，查询、修改 */
void Manager_Mng(char *Account, int n)
{
    switch(n)
    {
    case 1:
        break;
    case 2:
        break;
    case 3:
        break;
    default:
        puts("异常!");
        break;
    }
}
/* 显示各功能登录后的信息 */
void display_Detailed(TotalNode *phead ,char *Account,int n)
{
    int in;
    switch(n)
    {
    case 1:
        while(1)
        {
            printf("=========欢迎%s同学=========\n",Account);
            puts("[1]查询已选课程");  //  查询自己所选的所有课程包括：课程代码、课程名称、任课老师
            puts("[2]添加课程");        //  增加所选课程
            puts("[3]删除所选课程");  //  删除所选课程
            puts("[4]返回主页面");
            printf("【请选择】");
            scanf("%d",&in);
            if(4 == in)
            {
                return; //  返回上层登录页面
            }
            Student_Mng(pStudent,Account, in);
            //puts("[4]");
        }
        break;
    case 2:
        while(1)
        {
            printf("=========欢迎%s老师=========\n",Account);
            puts("[1]查询学生选课信息");    //  
            puts("[2]添加老师课程信息");    //  
            puts("[3]删除老师课程信息");    //
            puts("[4]返回主页面");
            printf("【请选择】");
            scanf("%d",&in);
            if(4 == in)
            {
                return; //  返回上层登录页面
            }
            Teacher_Mng(pTeacher,Account, in);
        }
        //puts("[4]");
        break;
    case 3:
        printf("=========欢迎%s同志=========\n",Account);
        puts("[1]查询学生所选课程信息");
        puts("[2]修改选课信息");
        puts("[3]返回主页面");
        scanf("%d",&in);
        Manager_Mng(Account, in);
        //puts("[4]");
        break;
    default:
        puts("异常!");
        break;
    }

}

/* 验证账号密码 */
void checkAccountandPassword(TotalNode *phead ,char *Account, char *Password,int n)
{
    while(1)
    {
        gets(Account);
        /**/
        if(0 == strcmp(Account,"wantin"))
        {
            while(1)
            {
                printf("请输入密码:");
                gets(Password);
                if(0 == strcmp(Password,"123456"))
                {
                    display_Detailed(phead,Account, n);
                    return;
                }
            }
        }
        else
        {
            printf("请输入账号:");
        }
    }
}

/* 校验学生、教师、管理员的账号 密码 */
void checkPerson_Msg(TotalNode *phead , int n)
{
    switch(n)
    {
        case 1: //  学生登录    char studentAccount[20]; char studentPassword[20];  
            checkAccountandPassword(phead, studentAccount,studentPassword,n);
            break;
        case 2: //  教师登录    char teacherAccount[20]; char teacherPassword[20];      
            checkAccountandPassword(phead, teacherAccount,teacherPassword,n);
            break;
        case 3: //  管理员登录  char managerAccount[20]; char managerPassword[20];       
            checkAccountandPassword(phead, managerAccount,managerPassword,n);
            break;
        default:
            puts("异常!");
            break;
    }
}

/*  */

void main()
{
    TotalNode *phead=NULL;
    display(phead);}